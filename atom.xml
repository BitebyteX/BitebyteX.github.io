<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bitebyteX</title>
  
  <subtitle>bitebyte的学习笔记</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-12-12T14:13:52.479Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>bitebyte-coudidi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>开发中mvc接收复杂对象</title>
    <link href="http://example.com/2022/12/10/DevelopmentNotes/mvc%E6%8E%A5%E6%94%B6%E5%A4%8D%E6%9D%82%E5%AF%B9%E8%B1%A1%E7%9A%84/"/>
    <id>http://example.com/2022/12/10/DevelopmentNotes/mvc%E6%8E%A5%E6%94%B6%E5%A4%8D%E6%9D%82%E5%AF%B9%E8%B1%A1%E7%9A%84/</id>
    <published>2022-12-10T13:58:52.000Z</published>
    <updated>2022-12-12T14:13:52.479Z</updated>
    
    <content type="html"><![CDATA[<p>项目开发中遇到了一些springMVC接收参数的问题，简单的注解接收（比如哪个注解接收哪些格式的参数）比较简单就不多叙述了，本次主要记录一下最近遇到的复杂前端参数接收的问题。<br>注：实际开发中前后端参数格式协调即可，一般json格式只要后端根据前端发来的格式建立相应的类来接收就行，不过一般哪一方更改方便哪一方尽量做更改，一些接收方法最好掌握以应对不同的需求。</p><h2 id="1、同时接收多个不同对象"><a href="#1、同时接收多个不同对象" class="headerlink" title="1、同时接收多个不同对象"></a>1、同时接收多个不同对象</h2><p>在业务中，我有一个接口需要同时保存两个表中的记录（不要问为啥不分别做接口保存，没办法，业务需求或者前端需要或者我觉得这样更方便高效）。</p><p>比如客户表和其相关家属的表，前端的需求是只要入库了一条客户的记录，就要同时存入相关联的一条其咨询的老人的记录，并且前端会同时发来客户和其老人的相关信息让后端存储，即两个对象: Customer 和 Elderly 。</p><p>起初我是这样写的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;add&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;新增客户信息,同时存入家属信息&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">add</span><span class="params">(<span class="meta">@ApiParam(&quot;客户&quot;)</span> <span class="meta">@RequestBody</span> Customer customer,</span></span><br><span class="line"><span class="params">                  <span class="meta">@ApiParam(&quot;老人信息&quot;)</span><span class="meta">@RequestBody</span> Elderly elderly)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端发来的格式为json，最后的结果就是mvc无法识别前端传过来的参数，怎么改都不行。<br>最终的解决方法是，既然两个类接收不了，那就合成一个类CustomerDto：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomerDto</span> &#123;</span><br><span class="line">    Customer customer;</span><br><span class="line">    Elderly elderly;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;add&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;新增客户信息,同时存入家属信息&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">add</span><span class="params">(<span class="meta">@ApiParam(&quot;客户&amp;家属信息&quot;)</span> <span class="meta">@RequestBody</span> CustomerDto customerDto)</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前没有更好的方法，只是觉得不能用两个类来接收有点low。</p><h2 id="2、接收格式中含数组或者接收同一个类的集合"><a href="#2、接收格式中含数组或者接收同一个类的集合" class="headerlink" title="2、接收格式中含数组或者接收同一个类的集合"></a>2、接收格式中含数组或者接收同一个类的集合</h2><p>项目中前端发过来的格式为：<br><img src="/images/development/1.1.png"></p><p>如图，json数据包含一个id以及一个药品信息（药品名称name和吃药时间），这几个药品同时属于一个老人，也就是需要入库时绑定老人的主键id，那么数据库什么样呢？如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `prescribe` (</span><br><span class="line">  `id` bigint(11) unsigned NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(50) NOT NULL DEFAULT &#x27;&#x27; COMMENT &#x27;药品名称&#x27;,</span><br><span class="line">  `morning` tinyint(2) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;早&#x27;,</span><br><span class="line">  `noon` tinyint(2) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;中&#x27;,</span><br><span class="line">  `night` tinyint(2) NOT NULL DEFAULT &#x27;0&#x27; COMMENT &#x27;晚&#x27;,</span><br><span class="line">  `elderly_id` bigint(11) NOT NULL COMMENT &#x27;老人id&#x27;,</span><br><span class="line">  `gmt_create` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;,</span><br><span class="line">  `gmt_modified` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#x27;修改时间&#x27;,</span><br><span class="line">  PRIMARY KEY (`id`),</span><br><span class="line">  KEY `ids_eld` (`elderly_id`) USING BTREE COMMENT &#x27;老人id索引&#x27;</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8mb4;</span><br></pre></td></tr></table></figure><p>很明显和前端的发来的格式不同。<br>这就很痛苦，前端不想修改，给的解释是那种格式只能发过来数组形式，我又不能按照他发来的格式建表，因为业务上会很麻烦，那么就需要想办法接收，并且接收到还要转化。<br>我的解决方法为（可能有些复杂），按照发来的json格式，初步建立下面的类来接收：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrescribeDto</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;需要和处方绑定的老人id&quot;)</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;请绑定老人id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;处方集合&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;PrescribeTmp&gt; prescribeList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PrescribeDto</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Prescribe&gt; <span class="title function_">getPrescribes</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Prescribe&gt; prescribes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (PrescribeTmp prescribeTmp : prescribeList) &#123;</span><br><span class="line">            prescribes.add(<span class="keyword">new</span> <span class="title class_">Prescribe</span>(id,prescribeTmp));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prescribes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PrescribeDto</span><span class="params">(String id, List&lt;Prescribe&gt; prescribes)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        List&lt;PrescribeTmp&gt; prescribeTmpList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Prescribe prescribe : prescribes) &#123;</span><br><span class="line">            prescribeTmpList.add(<span class="keyword">new</span> <span class="title class_">PrescribeTmp</span>(prescribe));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.prescribeList = prescribeTmpList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即包含老人的id属性和药品集合，getPrescribes()方法是用来转化将前端格式转化为数据库交互的格式，重写的构造函数也是为了将从数据库查出的格式转为前端需要的格式（为啥这么麻烦来回转呢？因为业务需要这样存，前端又只想这样发 -.-）。</p><p>还需要一个临时药品类（符合前端样式的）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrescribeTmp</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] times;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getTimes() &#123;</span><br><span class="line">        <span class="keyword">return</span> times;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTimes</span><span class="params">(String[] times)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.times = times;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PrescribeTmp</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PrescribeTmp</span><span class="params">(String name, String[] times)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.times = times;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PrescribeTmp</span><span class="params">(Prescribe prescribe)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = prescribe.getName();</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(prescribe.getMorning() == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.times[i++] = <span class="string">&quot;早&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(prescribe.getNoon() == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.times[i++] = <span class="string">&quot;中&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(prescribe.getNight() == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">this</span>.times[i++] = <span class="string">&quot;晚&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么真正与数据库交互的类为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Prescribe</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;药品名称&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;早&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer morning;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;中&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer noon;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;晚&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer night;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(value = &quot;老人id&quot;)</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;请绑定老人id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String elderly_id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;,timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;创建时间&quot;)</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Date gmt_create;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;,timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;更新时间&quot;)</span></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date gmt_modified;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Prescribe</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Prescribe</span><span class="params">(String elderly_id, PrescribeTmp prescribeTmp)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.elderly_id = elderly_id;</span><br><span class="line">        <span class="built_in">this</span>.morning = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.noon = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.night = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.name = prescribeTmp.getName();</span><br><span class="line">        String[] times = prescribeTmp.getTimes();</span><br><span class="line">        <span class="keyword">for</span> (String time : times) &#123;</span><br><span class="line">            <span class="keyword">if</span> (time.equals(<span class="string">&quot;早&quot;</span>))&#123;</span><br><span class="line">                <span class="built_in">this</span>.morning = <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (time.equals(<span class="string">&quot;中&quot;</span>))&#123;</span><br><span class="line">                <span class="built_in">this</span>.noon = <span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (time.equals(<span class="string">&quot;晚&quot;</span>))&#123;</span><br><span class="line">                <span class="built_in">this</span>.night = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中写了一个构造方法用来转化Dto格式的数据。</p><p>大功告成。只能说这样的方法不是很满意，但是在当时的需求下我只能想到这样。</p><h2 id="3、-接收格式中含数组-遇到的其他问题（已解决）"><a href="#3、-接收格式中含数组-遇到的其他问题（已解决）" class="headerlink" title="3、[接收格式中含数组] 遇到的其他问题（已解决）"></a>3、[接收格式中含数组] 遇到的其他问题（已解决）</h2><p><strong>问题1：</strong></p><p>一开始写的时候Dto没有写空参构造（如下）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrescribeDto</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;需要和处方绑定的老人id&quot;)</span></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;请绑定老人id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;处方集合&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;PrescribeTmp&gt; prescribeList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Prescribe&gt; <span class="title function_">getPrescribes</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Prescribe&gt; prescribes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (PrescribeTmp prescribeTmp : prescribeList) &#123;</span><br><span class="line">            prescribes.add(<span class="keyword">new</span> <span class="title class_">Prescribe</span>(id,prescribeTmp));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prescribes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PrescribeDto</span><span class="params">(String id, List&lt;Prescribe&gt; prescribes)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        List&lt;PrescribeTmp&gt; prescribeTmpList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (Prescribe prescribe : prescribes) &#123;</span><br><span class="line">            prescribeTmpList.add(<span class="keyword">new</span> <span class="title class_">PrescribeTmp</span>(prescribe));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.prescribeList = prescribeTmpList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为当时我觉得已经有了一个构造函数了，我也不会用到空参构造，所以就没有写，结果就是mvc报错：<br><code>no Creators, like default construct, exist</code><br>那我就补了一个空参构造（Tmp也是这样），结果就成功了。因此，可以判断mvc并不是根据参数优选相应的构造函数去接受，而是直接空参构造一个类，再调用get、set方法去添加属性，由此也引出了问题2。</p><p><strong>问题2：</strong></p><p>如果未写完整get、set方法，那么mvc将会报接受错误。<br>这点最头痛的是，报错信息并不是表明没有get、set方法，而是其他错误信息，这就导致我一度以为用Dto这种形式的类去接收是不对的。那么我是怎么排查到的呢？用swagger！swagger是给前端查看的接口文档，可以用来查询各接口需要什么样的格式，如下：</p><p>查看接收的类：<br><img src="/images/development/1.2.png"></p><p>swagger还给出了样例：<br><img src="/images/development/1.3.png"></p><p>那么没有get、set方法时，我查看swagger是这样的：<br><img src="/images/development/1.4.png"></p><p>样例是这样的：<br><img src="/images/development/1.5.png"></p><p>可以看到，需要接收的格式还是Prescribe类，这样一对比两个类的区别，就发现Dto类差了get、set方法，因此就给它加了一个@Data注解，完美解决！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;项目开发中遇到了一些springMVC接收参数的问题，简单的注解接收（比如哪个注解接收哪些格式的参数）比较简单就不多叙述了，本次主要记录一下最近遇到的复杂前端参数接收的问题。&lt;br&gt;注：实际开发中前后端参数格式协调即可，一般json格式只要后端根据前端发来的格式建立相应的类</summary>
      
    
    
    
    <category term="开发笔记（项目中的问题和解决）" scheme="http://example.com/categories/%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0%EF%BC%88%E9%A1%B9%E7%9B%AE%E4%B8%AD%E7%9A%84%E9%97%AE%E9%A2%98%E5%92%8C%E8%A7%A3%E5%86%B3%EF%BC%89/"/>
    
    
  </entry>
  
  <entry>
    <title>Tiny Language</title>
    <link href="http://example.com/2022/11/23/LanguageDesign/class1/"/>
    <id>http://example.com/2022/11/23/LanguageDesign/class1/</id>
    <published>2022-11-23T12:44:14.826Z</published>
    <updated>2022-12-13T02:16:20.219Z</updated>
    
    <content type="html"><![CDATA[<p>第一节课的内容为tinylauage0、1、2的编译和解释实现，整个编译过程为Name&#x3D;&gt;Nameless&#x3D;&gt;StackVM，3层IR，Name和Nameless都使用了宿主语言的栈，StackVM则模拟cpu的执行。Name中含有对变量名寻址的过程，而Nameless将变量名去除，直接去栈中取值。也可将上述过程改为先编译去除使用宿主语言栈的过程，再编译去除变量名的寻址。<br><img src="/images/class1/class1.4.png"></p><h2 id="Name2Nameless"><a href="#Name2Nameless" class="headerlink" title="Name2Nameless"></a>Name2Nameless</h2><p><strong>Name.expr:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">type rec expr = </span><br><span class="line">    | Cst(int) </span><br><span class="line">    | Add(expr,expr)</span><br><span class="line">    | Mul(expr,expr)</span><br><span class="line">    | Var(string)</span><br><span class="line">    | Let(string, expr, expr)</span><br><span class="line"></span><br><span class="line">type env = list&lt;(string, int)&gt;</span><br><span class="line"></span><br><span class="line">let rec eval = (expr, env) =&gt; &#123;</span><br><span class="line">    switch expr &#123;</span><br><span class="line">        | Cst(i) =&gt; i</span><br><span class="line">        | Add(a,b) =&gt; eval(a, env) + eval(b, env)</span><br><span class="line">        | Mul(a,b) =&gt; eval(a, env) * eval(b, env)</span><br><span class="line">        | Var(x) =&gt; List.assoc(x, env)</span><br><span class="line">        | Let(x, e1, e2) =&gt; eval(e2, list&#123;(x, eval(e1, env)), ...env&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中由于x为变量名，则需要一个寻址的过程为Var(x)，因此将Name.expr编译成Nameless.expr，直接去栈中取值，即Var(int)</p><p><strong>Nameless.expr:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">type rec expr = </span><br><span class="line">    | Cst(int) </span><br><span class="line">    | Add(expr,expr)</span><br><span class="line">    | Mul(expr,expr)</span><br><span class="line">    | Var(int)</span><br><span class="line">    | Let(expr, expr)</span><br><span class="line"></span><br><span class="line">type env = list&lt;int&gt;</span><br><span class="line"></span><br><span class="line">let rec eval = (expr, env) =&gt; &#123;</span><br><span class="line">    switch expr &#123;</span><br><span class="line">        | Cst(i) =&gt; i</span><br><span class="line">        | Add(a,b) =&gt; eval(a, env) + eval(b, env)</span><br><span class="line">        | Mul(a,b) =&gt; eval(a, env) * eval(b, env)</span><br><span class="line">        | Var(n) =&gt; List.nth(env, n)</span><br><span class="line">        | Let(e1, e2) =&gt; eval(e2, list&#123;(eval(e1, env)), ...env&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>Name.expr 2 Nameless.expr:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let rec comp = (expr : Name.expr, cenv): Nameless.expr =&gt; &#123;</span><br><span class="line">    switch expr &#123;</span><br><span class="line">        | Cst(i) =&gt; Cst(i)</span><br><span class="line">        | Add(a,b) =&gt; Add(comp(a, cenv), comp(b, cenv))</span><br><span class="line">        | Mul(a,b) =&gt; Mul(comp(a, cenv), comp(b, cenv))</span><br><span class="line">        | Var(x) =&gt; Var(index(cenv, x))</span><br><span class="line">        | Let(x, e1, e2) =&gt; Let(comp(e1, cenv), comp(e2, list&#123;x, ...cenv&#125;))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Expmple:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Name.Let(</span><br><span class="line">    &quot;x&quot;, </span><br><span class="line">    Add(Cst(1), Cst(2)), //e1</span><br><span class="line">    Mul(Var(&quot;x&quot;), Var(&quot;x&quot;)) //e2</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p><strong>Complie Progress</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">comp( </span><br><span class="line">    Let(&quot;x&quot;, Add(Cst(1), Cst(2)), Mul(Var(&quot;x&quot;), Var(&quot;x&quot;))), //expr</span><br><span class="line">    list&#123;&#125; //cenv</span><br><span class="line">    )</span><br><span class="line">=&gt;</span><br><span class="line">Let( </span><br><span class="line">    comp( </span><br><span class="line">        Add(Cst(1), Cst(2)), </span><br><span class="line">        list&#123;&#125; </span><br><span class="line">        ), </span><br><span class="line">    comp( </span><br><span class="line">        Mul(Var(&quot;x&quot;), Var(&quot;x&quot;)), </span><br><span class="line">        list&#123;x&#125; </span><br><span class="line">        ) </span><br><span class="line">    )</span><br><span class="line">其中：</span><br><span class="line">comp( </span><br><span class="line">    Add(Cst(1), Cst(2)), </span><br><span class="line">    list&#123;&#125; </span><br><span class="line">    )</span><br><span class="line">=&gt;</span><br><span class="line">Add(</span><br><span class="line">    comp(Cst(1), list&#123;&#125;),</span><br><span class="line">    comp(Cst(2), list&#123;&#125;)</span><br><span class="line">)</span><br><span class="line">=&gt;</span><br><span class="line">Add( Cst(1), Cst(2) )</span><br><span class="line">同样的：</span><br><span class="line">comp( </span><br><span class="line">    Mul(Var(&quot;x&quot;), Var(&quot;x&quot;)), </span><br><span class="line">    list&#123;x&#125; </span><br><span class="line">    ) </span><br><span class="line">=&gt;</span><br><span class="line">Mul(</span><br><span class="line">    comp( Var(&quot;x&quot;), list&#123;x&#125;),</span><br><span class="line">    comp( Var(&quot;x&quot;), list&#123;x&#125;)</span><br><span class="line">)</span><br><span class="line">=&gt;</span><br><span class="line">Mul(</span><br><span class="line">    Var(index(list&#123;x&#125;, x)),</span><br><span class="line">    Var(index(list&#123;x&#125;, x))</span><br><span class="line">)</span><br><span class="line">=&gt;</span><br><span class="line">Mul( Var(0),Var(0) )</span><br><span class="line">综上：</span><br><span class="line">Name.expr =&gt; NamelessExpr:</span><br><span class="line">Name.Let(</span><br><span class="line">    &quot;x&quot;, </span><br><span class="line">    Add(Cst(1), Cst(2)), //e1</span><br><span class="line">    Mul(Var(&quot;x&quot;), Var(&quot;x&quot;)) //e2</span><br><span class="line">)</span><br><span class="line">=&gt;</span><br><span class="line">Nameless.Let(</span><br><span class="line">    Add( Cst(1), Cst(2) ),</span><br><span class="line">    Mul( Var(0), Var(0) )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>其中Nameless.eval:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let rec eval = (expr, env) =&gt; &#123;</span><br><span class="line">    switch expr &#123;</span><br><span class="line">        | Cst(i) =&gt; i</span><br><span class="line">        | Add(a,b) =&gt; eval(a, env) + eval(b, env)</span><br><span class="line">        | Mul(a,b) =&gt; eval(a, env) * eval(b, env)</span><br><span class="line">        | Var(n) =&gt; List.nth(env, n)</span><br><span class="line">        | Let(e1, e2) =&gt; eval(e2, list&#123;(eval(e1, env)), ...env&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>则将编译结果代入计算：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">eval(</span><br><span class="line">    Let(</span><br><span class="line">        Add( Cst(1), Cst(2) ),</span><br><span class="line">        Mul( Var(0), Var(0) )</span><br><span class="line">    ),</span><br><span class="line">    list&#123;&#125;</span><br><span class="line">)</span><br><span class="line">=&gt;</span><br><span class="line">eval(</span><br><span class="line">    Mul( Var(0), Var(0) ),</span><br><span class="line">    list&#123;</span><br><span class="line">        ( </span><br><span class="line">            eval(</span><br><span class="line">                Add( Cst(1), Cst(2) )，</span><br><span class="line">                list&#123;&#125;</span><br><span class="line">            ) </span><br><span class="line">        ),</span><br><span class="line">        ...list&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">其中：</span><br><span class="line">eval(</span><br><span class="line">    Add( Cst(1), Cst(2) ),</span><br><span class="line">    list&#123;&#125;</span><br><span class="line">) </span><br><span class="line">=&gt;</span><br><span class="line">eval(Cst(1),list&#123;&#125;) + eval(Cst(2),list&#123;&#125;) = 3</span><br><span class="line">带回原式：</span><br><span class="line">eval(</span><br><span class="line">    Mul( Var(0), Var(0) ),</span><br><span class="line">    list&#123;3&#125;</span><br><span class="line">)</span><br><span class="line">=&gt;</span><br><span class="line">eval(Var(0), list&#123;3&#125;) * eval(Var(0), list&#123;3&#125;)</span><br><span class="line">=&gt;</span><br><span class="line">List.nth(list&#123;3&#125;, 0) * List.nth(list&#123;3&#125;, 0) = 3 * 3 = 9</span><br></pre></td></tr></table></figure><h2 id="Nameless2StackVM"><a href="#Nameless2StackVM" class="headerlink" title="Nameless2StackVM"></a>Nameless2StackVM</h2><p>由于Nameless其中的栈依然是使用的宿主语言的栈，因此需要将其编译为Instrs（指令集），方便栈式虚拟机的计算(模拟cpu的执行，实质上依然是使用宿主语言的栈)。</p><p><strong>StackVM.instrs</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">type instr = </span><br><span class="line">    | Cst(int) </span><br><span class="line">    | Add</span><br><span class="line">    | Mul</span><br><span class="line">    | Var(int) </span><br><span class="line">    | Pop </span><br><span class="line">    | Swap</span><br><span class="line"></span><br><span class="line">type instrs = list&lt;instr&gt;</span><br></pre></td></tr></table></figure><p><strong>Stack</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type operand = int</span><br><span class="line">type stack = list&lt;operand&gt;</span><br></pre></td></tr></table></figure><p><strong>Compile:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">type sv = Slocal | Stmp </span><br><span class="line">type senv = list&lt;sv&gt;</span><br><span class="line">let rec comp = (expr : Nameless.expr, senv: senv): StackVM.instrs =&gt; &#123;</span><br><span class="line">    switch expr &#123;</span><br><span class="line">        | Cst(i) =&gt; list&#123;Cst(i)&#125;</span><br><span class="line">        | Var(i) =&gt; list&#123;Var(sindex(senv, i))&#125;</span><br><span class="line">        // when local var reference appear in the right of a binary operator,</span><br><span class="line">        // the stack will push the left temp value</span><br><span class="line">        | Add(a, b) =&gt; Belt.List.concatMany([comp(a, senv), comp(b,list&#123;Stmp, ...senv&#125;), list&#123;Add&#125;])</span><br><span class="line">        | Mul(a, b) =&gt; Belt.List.concatMany([comp(a, senv), comp(b,list&#123;Stmp, ...senv&#125;), list&#123;Mul&#125;])</span><br><span class="line">        | Let(a, b) =&gt; Belt.List.concatMany([comp(a, senv), comp(b,list&#123;Slocal, ...senv&#125;), list&#123;Swap, Pop&#125;])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="本地变量与临时变量"><a href="#本地变量与临时变量" class="headerlink" title="本地变量与临时变量"></a>本地变量与临时变量</h3><p>Nameless中index的作用是取本地变量在所有本地变量的索引值，而在栈式虚拟机中，由于Add和Mul的存在，会将临时变量存入栈中，计算完成前栈平衡被打破，因此需要重写index，其作用是取本地变量在本地变量和临时变量中的索引值。</p><p><strong>Nameless中的index：</strong><br><img src="/images/class1/class1.1.png"></p><p><strong>StackVM中的sindex：</strong><br><img src="/images/class1/class1.2.png"></p><p><strong>sindex:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">type sv = Slocal | Stmp</span><br><span class="line">type senv = list&lt;sv&gt;</span><br><span class="line"></span><br><span class="line">let rec sindex = (senv, i): int =&gt; &#123;</span><br><span class="line">    switch senv &#123;</span><br><span class="line">    | list&#123;&#125; =&gt; assert false</span><br><span class="line">    | list&#123;Slocal, ...senv&#125; =&gt; </span><br><span class="line">        if i == 0&#123;</span><br><span class="line">                0</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            sindex(senv, i - 1) + 1</span><br><span class="line">        &#125;</span><br><span class="line">    | list&#123;Stmp, ...senv&#125; =&gt; sindex(senv, i) + 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Slocal</strong>代表了本地变量，<strong>Stmp</strong>代表临时变量。Add和Mul表达式都会产生临时变量，因此都需要重新计算索引, <strong>Let(a,b)</strong> 的a表达式则会产生本地变量存入栈中。</p><h3 id="是否使用宿主语言的栈"><a href="#是否使用宿主语言的栈" class="headerlink" title="是否使用宿主语言的栈"></a>是否使用宿主语言的栈</h3><p>Nameless中(Name中同样也是)， <strong>Add(a,b) &#x3D;&gt; eval(a, env) + eval(b, env)</strong> ，这样的执行过程中，’+’依然是使用了宿主语言的栈，并未存入临时变量供cpu进行操作，而是直接相加得到结果，Mul同样如此。</p><p><strong>StackVM.eval:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let rec eval = (instrs : instrs, stk : stack) =&gt; &#123;</span><br><span class="line">    switch (instrs, stk) &#123;</span><br><span class="line">        | (list&#123;Cst(i), ...rest&#125;,_) =&gt; eval(rest, list&#123;i, ...stk&#125;)</span><br><span class="line">        | (list&#123;Add, ...rest&#125;, list&#123;a, b, ...stk&#125;) =&gt; eval(rest, list&#123;a + b, ...stk&#125;)</span><br><span class="line">        | (list&#123;Mul, ...rest&#125;, list&#123;a, b, ...stk&#125;) =&gt; eval(rest, list&#123;a * b, ...stk&#125;)</span><br><span class="line">        | (list&#123;Var(i), ...rest&#125;, _) =&gt; eval(rest, list&#123;List.nth(stk, i), ...stk&#125;)</span><br><span class="line">        | (list&#123;Pop, ...rest&#125;, list&#123;_, ...stk&#125;) =&gt; eval(rest, stk)</span><br><span class="line">        | (list&#123;Swap, ...rest&#125;, list&#123;a, b, ...stk&#125;) =&gt; eval(rest, list&#123;b, a, ...stk&#125;)</span><br><span class="line">        | (list&#123;&#125;, list&#123;a, ..._stk&#125;) =&gt; a</span><br><span class="line">        | _ =&gt; assert false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StackVM中，将每一步计算编译成对应的指令集，将临时变量压入栈中再进行计算Add指令的计算，模拟cpu的执行过程。然而， <strong>(list{Add, …rest}, list{a, b, …stk}) &#x3D;&gt; eval(rest, list{a + b, …stk})</strong>  这样的执行过程中过程，a + b依然使用了宿主语言的栈，所以StackVM只是模拟了cpu的执行，实质上还是使用了宿主语言的的栈。</p><h3 id="Eval-Progress"><a href="#Eval-Progress" class="headerlink" title="Eval Progress"></a>Eval Progress</h3><p><strong>Example:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Add(Cst(1), Let(Cst(2), Add(Var(0), Cst(7))))</span><br><span class="line">(compile)=&gt;</span><br><span class="line">list&#123;Cst(1), Cst(2), Var(0), Cst(7), Add, Swap, Pop, Add&#125;</span><br></pre></td></tr></table></figure><p><strong>Stack:</strong><br><img src="/images/class1/class1.3.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;第一节课的内容为tinylauage0、1、2的编译和解释实现，整个编译过程为Name&amp;#x3D;&amp;gt;Nameless&amp;#x3D;&amp;gt;StackVM，3层IR，Name和Nameless都使用了宿主语言的栈，StackVM则模拟cpu的执行。Name中含有对变量名寻</summary>
      
    
    
    
    <category term="程序语言理论与实现" scheme="http://example.com/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80%E7%90%86%E8%AE%BA%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    
    
  </entry>
  
</feed>
