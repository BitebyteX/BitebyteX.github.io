<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bitebyteX</title>
  
  <subtitle>bitebyte的学习笔记</subtitle>
  <link href="https://bitebytex.github.io/atom.xml" rel="self"/>
  
  <link href="https://bitebytex.github.io/"/>
  <updated>2022-11-24T07:35:23.283Z</updated>
  <id>https://bitebytex.github.io/</id>
  
  <author>
    <name>bitebyte-coudidi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Tiny Language</title>
    <link href="https://bitebytex.github.io/2022/11/23/class1/"/>
    <id>https://bitebytex.github.io/2022/11/23/class1/</id>
    <published>2022-11-23T12:44:14.826Z</published>
    <updated>2022-11-24T07:35:23.283Z</updated>
    
    <content type="html"><![CDATA[<p>编译过程为Name&#x3D;&gt;Nameless&#x3D;&gt;StackVM,Name和Nameless都使用了宿主语言的栈，StackVM则模拟cpu的执行。Name中含有对变量名寻址的过程，而Nameless将变量名去除，直接去栈中取值。也可将上述过程改为先编译去除使用宿主语言栈的过程，再编译去除变量名的寻址。<br><img src="/./images/calss1/class1.4.png"></p><h2 id="Name2Nameless"><a href="#Name2Nameless" class="headerlink" title="Name2Nameless"></a>Name2Nameless</h2><p><strong>Name.expr:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let rec eval = (expr, env) =&gt; &#123;</span><br><span class="line">    switch expr &#123;</span><br><span class="line">        | Cst(i) =&gt; i</span><br><span class="line">        | Add(a,b) =&gt; eval(a, env) + eval(b, env)</span><br><span class="line">        | Mul(a,b) =&gt; eval(a, env) * eval(b, env)</span><br><span class="line">        | Var(x) =&gt; List.assoc(x, env)</span><br><span class="line">        | Let(x, e1, e2) =&gt; eval(e2, list&#123;(x, eval(e1, env)), ...env&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中由于x为变量名，则需要一个寻址的过程为Var(x)，因此将Name.expr编译成Nameless.expr，直接去栈中取值，即Var(int)</p><p><strong>Nameless.expr:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let rec eval = (expr, env) =&gt; &#123;</span><br><span class="line">    switch expr &#123;</span><br><span class="line">        | Cst(i) =&gt; i</span><br><span class="line">        | Add(a,b) =&gt; eval(a, env) + eval(b, env)</span><br><span class="line">        | Mul(a,b) =&gt; eval(a, env) * eval(b, env)</span><br><span class="line">        | Var(n) =&gt; List.nth(env, n)</span><br><span class="line">        | Let(e1, e2) =&gt; eval(e2, list&#123;(eval(e1, env)), ...env&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>Name.expr 2 Nameless.expr:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let rec comp = (expr : Name.expr, cenv): Nameless.expr =&gt; &#123;</span><br><span class="line">    switch expr &#123;</span><br><span class="line">        | Cst(i) =&gt; Cst(i)</span><br><span class="line">        | Add(a,b) =&gt; Add(comp(a, cenv), comp(b, cenv))</span><br><span class="line">        | Mul(a,b) =&gt; Mul(comp(a, cenv), comp(b, cenv))</span><br><span class="line">        | Var(x) =&gt; Var(index(cenv, x))</span><br><span class="line">        | Let(x, e1, e2) =&gt; Let(comp(e1, cenv), comp(e2, list&#123;x, ...cenv&#125;))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Expmple:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Name.Let(</span><br><span class="line">    &quot;x&quot;, </span><br><span class="line">    Add(Cst(1), Cst(2)), //e1</span><br><span class="line">    Mul(Var(&quot;x&quot;), Var(&quot;x&quot;)) //e2</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><p><strong>Complie Progress</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">comp( </span><br><span class="line">    Let(&quot;x&quot;, Add(Cst(1), Cst(2)), Mul(Var(&quot;x&quot;), Var(&quot;x&quot;))), //expr</span><br><span class="line">    list&#123;&#125; //cenv</span><br><span class="line">    )</span><br><span class="line">=&gt;</span><br><span class="line">Let( </span><br><span class="line">    comp( </span><br><span class="line">        Add(Cst(1), Cst(2)), </span><br><span class="line">        list&#123;&#125; </span><br><span class="line">        ), </span><br><span class="line">    comp( </span><br><span class="line">        Mul(Var(&quot;x&quot;), Var(&quot;x&quot;)), </span><br><span class="line">        list&#123;x&#125; </span><br><span class="line">        ) </span><br><span class="line">    )</span><br><span class="line">其中：</span><br><span class="line">comp( </span><br><span class="line">    Add(Cst(1), Cst(2)), </span><br><span class="line">    list&#123;&#125; </span><br><span class="line">    )</span><br><span class="line">=&gt;</span><br><span class="line">Add(</span><br><span class="line">    comp(Cst(1), list&#123;&#125;),</span><br><span class="line">    comp(Cst(2), list&#123;&#125;)</span><br><span class="line">)</span><br><span class="line">=&gt;</span><br><span class="line">Add( Cst(1), Cst(2) )</span><br><span class="line">同样的：</span><br><span class="line">comp( </span><br><span class="line">    Mul(Var(&quot;x&quot;), Var(&quot;x&quot;)), </span><br><span class="line">    list&#123;x&#125; </span><br><span class="line">    ) </span><br><span class="line">=&gt;</span><br><span class="line">Mul(</span><br><span class="line">    comp( Var(&quot;x&quot;), list&#123;x&#125;),</span><br><span class="line">    comp( Var(&quot;x&quot;), list&#123;x&#125;)</span><br><span class="line">)</span><br><span class="line">=&gt;</span><br><span class="line">Mul(</span><br><span class="line">    Var(index(list&#123;x&#125;, x)),</span><br><span class="line">    Var(index(list&#123;x&#125;, x))</span><br><span class="line">)</span><br><span class="line">=&gt;</span><br><span class="line">Mul( Var(0),Var(0) )</span><br><span class="line">综上：</span><br><span class="line">Name.expr =&gt; NamelessExpr:</span><br><span class="line">Name.Let(</span><br><span class="line">    &quot;x&quot;, </span><br><span class="line">    Add(Cst(1), Cst(2)), //e1</span><br><span class="line">    Mul(Var(&quot;x&quot;), Var(&quot;x&quot;)) //e2</span><br><span class="line">)</span><br><span class="line">=&gt;</span><br><span class="line">Nameless.Let(</span><br><span class="line">    Add( Cst(1), Cst(2) ),</span><br><span class="line">    Mul( Var(0), Var(0) )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><strong>其中Nameless.eval:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">let rec eval = (expr, env) =&gt; &#123;</span><br><span class="line">    switch expr &#123;</span><br><span class="line">        | Cst(i) =&gt; i</span><br><span class="line">        | Add(a,b) =&gt; eval(a, env) + eval(b, env)</span><br><span class="line">        | Mul(a,b) =&gt; eval(a, env) * eval(b, env)</span><br><span class="line">        | Var(n) =&gt; List.nth(env, n)</span><br><span class="line">        | Let(e1, e2) =&gt; eval(e2, list&#123;(eval(e1, env)), ...env&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>则将编译结果代入计算：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">eval(</span><br><span class="line">    Let(</span><br><span class="line">        Add( Cst(1), Cst(2) ),</span><br><span class="line">        Mul( Var(0), Var(0) )</span><br><span class="line">    ),</span><br><span class="line">    list&#123;&#125;</span><br><span class="line">)</span><br><span class="line">=&gt;</span><br><span class="line">eval(</span><br><span class="line">    Mul( Var(0), Var(0) ),</span><br><span class="line">    list&#123;</span><br><span class="line">        ( </span><br><span class="line">            eval(</span><br><span class="line">                Add( Cst(1), Cst(2) )，</span><br><span class="line">                list&#123;&#125;</span><br><span class="line">            ) </span><br><span class="line">        ),</span><br><span class="line">        ...list&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line">其中：</span><br><span class="line">eval(</span><br><span class="line">    Add( Cst(1), Cst(2) ),</span><br><span class="line">    list&#123;&#125;</span><br><span class="line">) </span><br><span class="line">=&gt;</span><br><span class="line">eval(Cst(1),list&#123;&#125;) + eval(Cst(2),list&#123;&#125;) = 3</span><br><span class="line">带回原式：</span><br><span class="line">eval(</span><br><span class="line">    Mul( Var(0), Var(0) ),</span><br><span class="line">    list&#123;3&#125;</span><br><span class="line">)</span><br><span class="line">=&gt;</span><br><span class="line">eval(Var(0), list&#123;3&#125;) * eval(Var(0), list&#123;3&#125;)</span><br><span class="line">=&gt;</span><br><span class="line">List.nth(list&#123;3&#125;, 0) * List.nth(list&#123;3&#125;, 0) = 3 * 3 = 9</span><br></pre></td></tr></table></figure><h2 id="Nameless2StackVM"><a href="#Nameless2StackVM" class="headerlink" title="Nameless2StackVM"></a>Nameless2StackVM</h2><p>由于Nameless其中的栈依然是使用的宿主语言的栈，因此需要将其编译为Instrs（指令集），方便栈式虚拟机的计算(模拟cpu的执行，实质上依然是使用宿主语言的栈)。</p><p><strong>StackVM.instrs</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">type instr = </span><br><span class="line">    | Cst(int) </span><br><span class="line">    | Add</span><br><span class="line">    | Mul</span><br><span class="line">    | Var(int) </span><br><span class="line">    | Pop </span><br><span class="line">    | Swap</span><br><span class="line"></span><br><span class="line">type instrs = list&lt;instr&gt;</span><br></pre></td></tr></table></figure><p><strong>Stack</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">type operand = int</span><br><span class="line">type stack = list&lt;operand&gt;</span><br></pre></td></tr></table></figure><p><strong>Compile:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">type sv = Slocal | Stmp </span><br><span class="line">type senv = list&lt;sv&gt;</span><br><span class="line">let rec comp = (expr : Nameless.expr, senv: senv): StackVM.instrs =&gt; &#123;</span><br><span class="line">    switch expr &#123;</span><br><span class="line">        | Cst(i) =&gt; list&#123;Cst(i)&#125;</span><br><span class="line">        | Var(i) =&gt; list&#123;Var(sindex(senv, i))&#125;</span><br><span class="line">        // when local var reference appear in the right of a binary operator,</span><br><span class="line">        // the stack will push the left temp value</span><br><span class="line">        | Add(a, b) =&gt; Belt.List.concatMany([comp(a, senv), comp(b,list&#123;Stmp, ...senv&#125;), list&#123;Add&#125;])</span><br><span class="line">        | Mul(a, b) =&gt; Belt.List.concatMany([comp(a, senv), comp(b,list&#123;Stmp, ...senv&#125;), list&#123;Mul&#125;])</span><br><span class="line">        | Let(a, b) =&gt; Belt.List.concatMany([comp(a, senv), comp(b,list&#123;Slocal, ...senv&#125;), list&#123;Swap, Pop&#125;])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="本地变量与临时变量"><a href="#本地变量与临时变量" class="headerlink" title="本地变量与临时变量"></a>本地变量与临时变量</h3><p>Nameless中index的作用是取本地变量在所有本地变量的索引值，而在栈式虚拟机中，由于Add和Mul的存在，会将临时变量存入栈中，计算完成前栈平衡被打破，因此需要重写index，其作用是取本地变量在本地变量和临时变量中的索引值。</p><p><strong>Nameless中的index：</strong><br><img src="/./images/calss1/class1.1.png"></p><p><strong>StackVM中的sindex：</strong><br><img src="/./images/calss1/class1.2.png"></p><p><strong>sindex:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">type sv = Slocal | Stmp</span><br><span class="line">type senv = list&lt;sv&gt;</span><br><span class="line"></span><br><span class="line">let rec sindex = (senv, i): int =&gt; &#123;</span><br><span class="line">    switch senv &#123;</span><br><span class="line">    | list&#123;&#125; =&gt; assert false</span><br><span class="line">    | list&#123;Slocal, ...senv&#125; =&gt; </span><br><span class="line">        if i == 0&#123;</span><br><span class="line">                0</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            sindex(senv, i - 1) + 1</span><br><span class="line">        &#125;</span><br><span class="line">    | list&#123;Stmp, ...senv&#125; =&gt; sindex(senv, i) + 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Slocal</strong>代表了本地变量，<strong>Stmp</strong>代表临时变量。Add和Mul表达式都会产生临时变量，因此都需要重新计算索引, <strong>Let(a,b)</strong> 的a表达式则会产生本地变量存入栈中。</p><h3 id="是否使用宿主语言的栈"><a href="#是否使用宿主语言的栈" class="headerlink" title="是否使用宿主语言的栈"></a>是否使用宿主语言的栈</h3><p>Nameless中(Name中同样也是)，**Add(a,b) &#x3D;&gt; eval(a, env) + eval(b, env)**，这样的执行过程中，’+’依然是使用了宿主语言的栈，并未存入临时变量供cpu进行操作，而是直接相加得到结果，Mul同样如此。</p><p><strong>StackVM.eval:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">let rec eval = (instrs : instrs, stk : stack) =&gt; &#123;</span><br><span class="line">    switch (instrs, stk) &#123;</span><br><span class="line">        | (list&#123;Cst(i), ...rest&#125;,_) =&gt; eval(rest, list&#123;i, ...stk&#125;)</span><br><span class="line">        | (list&#123;Add, ...rest&#125;, list&#123;a, b, ...stk&#125;) =&gt; eval(rest, list&#123;a + b, ...stk&#125;)</span><br><span class="line">        | (list&#123;Mul, ...rest&#125;, list&#123;a, b, ...stk&#125;) =&gt; eval(rest, list&#123;a * b, ...stk&#125;)</span><br><span class="line">        | (list&#123;Var(i), ...rest&#125;, _) =&gt; eval(rest, list&#123;List.nth(stk, i), ...stk&#125;)</span><br><span class="line">        | (list&#123;Pop, ...rest&#125;, list&#123;_, ...stk&#125;) =&gt; eval(rest, stk)</span><br><span class="line">        | (list&#123;Swap, ...rest&#125;, list&#123;a, b, ...stk&#125;) =&gt; eval(rest, list&#123;b, a, ...stk&#125;)</span><br><span class="line">        | (list&#123;&#125;, list&#123;a, ..._stk&#125;) =&gt; a</span><br><span class="line">        | _ =&gt; assert false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StackVM中，将每一步计算编译成对应的指令集，将临时变量压入栈中再进行计算Add指令的计算，模拟cpu的执行过程。然而，**(list{Add, …rest}, list{a, b, …stk}) &#x3D;&gt; eval(rest, list{a + b, …stk})** 这样的执行过程中过程，a + b依然使用了宿主语言的栈，所以StackVM只是模拟了cpu的执行，实质上还是使用了宿主语言的的栈。</p><h3 id="Eval-Progress"><a href="#Eval-Progress" class="headerlink" title="Eval Progress"></a>Eval Progress</h3><p><strong>Example:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Add(Cst(1), Let(Cst(2), Add(Var(0), Cst(7))))</span><br><span class="line">(compile)=&gt;</span><br><span class="line">list&#123;Cst(1), Cst(2), Var(0), Cst(7), Add, Swap, Pop, Add&#125;</span><br></pre></td></tr></table></figure><p><strong>Stack:</strong><br><img src="/./images/calss1/class1.3.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;编译过程为Name&amp;#x3D;&amp;gt;Nameless&amp;#x3D;&amp;gt;StackVM,Name和Nameless都使用了宿主语言的栈，StackVM则模拟cpu的执行。Name中含有对变量名寻址的过程，而Nameless将变量名去除，直接去栈中取值。也可将上述过程改为先</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="https://bitebytex.github.io/2022/11/23/test/"/>
    <id>https://bitebytex.github.io/2022/11/23/test/</id>
    <published>2022-11-23T12:42:37.000Z</published>
    <updated>2022-11-23T12:42:37.534Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://bitebytex.github.io/2022/11/23/hello-world/"/>
    <id>https://bitebytex.github.io/2022/11/23/hello-world/</id>
    <published>2022-11-23T09:24:13.408Z</published>
    <updated>2022-11-23T09:24:13.408Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
